[{"D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\index.js":"1","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\Board.js":"2","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\Cell.js":"3","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\products.js":"4","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\Order.js":"5","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\grid.js":"6","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\data.js":"7"},{"size":651,"mtime":1609737604314,"results":"8","hashOfConfig":"9"},{"size":17586,"mtime":1609766815797,"results":"10","hashOfConfig":"9"},{"size":208,"mtime":1609141730851,"results":"11","hashOfConfig":"9"},{"size":728,"mtime":1609737604315,"results":"12","hashOfConfig":"9"},{"size":1044,"mtime":1609747615464,"results":"13","hashOfConfig":"9"},{"size":377,"mtime":1609737604314,"results":"14","hashOfConfig":"9"},{"size":5934,"mtime":1609764472456,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"11nb19v",{"filePath":"19","messages":"20","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\index.js",[],["34","35"],"D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\Board.js",["36","37","38","39","40","41","42"],"import React from \"react\";\r\nimport Products from \"./products.js\";\r\nimport Grid from \"./grid.js\";\r\n\r\nimport Order from \"./Order.js\";\r\nimport Cell from \"./Cell.js\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Table, Card, Row, Col, ListGroup } from \"react-bootstrap\";\r\nimport { allProducts, allOrders } from \"./data.js\";\r\n\r\nclass Board extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tlet cellsInBelt = 22;\r\n\t\tlet cellsInRow = 5;\r\n\r\n\t\tlet order = [];\r\n\t\t//order = this.initOrder(allOrders[0]).sortProduct(this.sortProduct);\r\n\t\tlet cells = Array(cellsInBelt * cellsInRow).fill(null);\r\n\t\tconst initialCells = JSON.parse(JSON.stringify(cells));\r\n\r\n\t\tthis.state = {\r\n\t\t\tcellsInRow: cellsInRow,\r\n\t\t\tcellsInBent: cellsInBelt,\r\n\t\t\tcells: cells,\r\n\t\t\txIsNext: true,\r\n\t\t\tproducts: allProducts,\r\n\t\t\torder: order,\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tcells: initialCells,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\tnextPatchProducts: [],\r\n\t\t\tbeltIndices: [0, 0, 0, 0, 0],\r\n\t\t\tmyOrder: [],\r\n\t\t\tmyOrderWithName: [],\r\n\t\t\tfillingPercent: 0,\r\n\t\t\ttime:0,\r\n\t\t\tlastPosition:1\r\n\t\t};\r\n\t}\r\n\tsortProduct(a, b) {\r\n\t\tif (a.beltCount != b.beltCount) return a.beltCount - b.beltCount;\r\n\t\telse return a.unitNo - b.unitNo;\r\n\t}\r\n\tsetOrder(orderID) {\r\n\t\tlet orderReady = [];\r\n\t\tif (orderID == -1) orderReady = this.initOrder(this.state.myOrder);\r\n\t\telse orderReady = this.initOrder(allOrders[orderID]);\r\n\t\tconsole.log(\"order is ready??\", orderReady);\r\n\t\torderReady.sort(this.sortProduct);\r\n\t\t// calctime by how?\r\n\t\tlet time = 0;\r\n\t\tlet position = 1;\r\n\t\torderReady.forEach(element => {\r\n\t\t\ttime += 3 + Math.abs(element.name.unitNo -position)*2;\r\n\t\t\tposition = element.name.unitNo;\r\n\t\t});\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tcells: Array(this.state.cellsInBent * this.state.cellsInRow).fill(null),\r\n\t\t\t\torder: orderReady,\r\n\t\t\t\ttime:time,\r\n\t\t\t\t/*lastPosition:1*/\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.fillBoard();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tinitOrder(order) {\r\n\t\tlet orderStorted = [];\r\n\t\torder.forEach(function (item) {\r\n\t\t\torderStorted.push([item.id - 1, item.quantity]);\r\n\t\t});\r\n\t\tlet finalOrder = [];\r\n\t\torderStorted.forEach((product) => {\r\n\t\t\tlet id = product[0];\r\n\t\t\tlet quantity = product[1];\r\n\t\t\tlet name = allProducts[id];\r\n\t\t\tlet productName = name.name;\r\n\t\t\tlet beltCount = name.beltCount;\r\n\t\t\tlet cellsDepth = name.cellsDepth;\r\n\t\t\tlet symbol = name.symbol;\r\n\t\t\tlet unitNo = name.unitNo;\r\n\t\t\tfinalOrder.push({\r\n\t\t\t\tid,\r\n\t\t\t\tquantity,\r\n\t\t\t\tname,\r\n\t\t\t\tproductName,\r\n\t\t\t\tsymbol,\r\n\t\t\t\tbeltCount,\r\n\t\t\t\tcellsDepth,\r\n\t\t\t\tunitNo,\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn finalOrder;\r\n\t}\r\n\tclearMyOrder() {\r\n\t\tthis.setState({\r\n\t\t\tmyOrder: [],\r\n\t\t\tmyOrderWithName: [],\r\n\t\t\tcells: [],\r\n\t\t\tfillingPercent: 0,\r\n\t\t\torder: [],\r\n\t\t});\r\n\t}\r\n\tdecideStartIndex(startIndex,beltCount){\r\n\t\tif (beltCount === 3) startIndex = 2;\r\n\t\telse if (beltCount == 1 && startIndex == 4) startIndex = 4;\r\n\t\telse if (beltCount == 1 && startIndex == 0) startIndex = 4;\r\n\t\t/*else if(beltCount == 1)\r\n\t\t{\r\n\t\t\tstartIndex = this.state.beltIndices.indexOf(Math.min(...this.state.beltIndices));\r\n\t\t}*/\r\n\t\telse if ( startIndex + beltCount >= this.state.cellsInRow || beltCount > 3)\r\n\t\t\tstartIndex = 0;\r\n\r\n\t\tif (beltCount === 2 && startIndex % 2 === 1)\r\n\t\t\tstartIndex = startIndex + 1;\r\n\t\treturn startIndex;\r\n\t}\r\n\thandleOneProduct(item, startIndex) {\r\n\t\tlet filledCount = 0;\r\n\t\tlet originalStartIndex = startIndex;\r\n\t\tlet currentcells = [...this.state.cells];\r\n\t\tconsole.log(\"History now \", this.state.history);\r\n\r\n\t\t/*switch (item.beltCount){\r\n\t\t\tcase 1:\r\n\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tif(startIndex > 3)\r\n\t\t\t\t\tstartIndex =0;\r\n\t\t\t\tif (startIndex % 2 === 1)\r\n\t\t\t\t\tstartIndex = startIndex + 1;\r\n\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tstartIndex = 2;\r\n\t\t\tbreak;\r\n\t\t\tcase 4,5:\r\n\t\t\t\tstartIndex = 0;\r\n\t\t\tbreak;\r\n\t\t}*/\r\n\t\t/*if (item.beltCount === 3) startIndex = 2;\r\n\t\telse if (item.beltCount == 1 && startIndex == 4) startIndex = 4;\r\n\t\telse if (\r\n\t\t\tstartIndex + item.beltCount >= this.state.cellsInRow ||\r\n\t\t\titem.beltCount > 3\r\n\t\t)\r\n\t\t\tstartIndex = 0;\r\n\r\n\t\tif (item.beltCount === 2 && startIndex % 2 === 1)\r\n\t\t\tstartIndex = startIndex + 1;*/\r\n\t\tstartIndex = this.decideStartIndex(startIndex,item.beltCount);\r\n\r\n\t\tconsole.log(\"startIndex is \", startIndex);\r\n\t\tlet available = this.checkSpace(\r\n\t\t\tstartIndex,\r\n\t\t\titem.beltCount,\r\n\t\t\titem.cellsDepth\r\n\t\t);\r\n\t\tif (available) {\r\n\t\t\tthis.shiftCells(startIndex, item);\r\n\t\t\tthis.state.cells.forEach((cell) => {\r\n\t\t\t\tif (cell != null) filledCount++;\r\n\t\t\t\t//console.log('FilledCellsCount', filledCount, cell);\r\n\t\t\t});\r\n\t\t\tstartIndex = startIndex + item.beltCount;\r\n\t\t\t/*let time = this.state.time + 3 + Math.abs(this.state.lastPosition-item.unitNo)*2;\r\n\t\t\tconsole.log('time till now',time);*/\r\n\t\t\tthis.updateBeltsStatus();\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tcells: this.state.cells,\r\n\t\t\t\tindex: startIndex,\r\n\t\t\t\tfillingPercent:\r\n\t\t\t\t\t(filledCount * 1.0) /\r\n\t\t\t\t\t(this.state.cellsInBent * this.state.cellsInRow * 1.0),\r\n\t\t\t\thistory: [\r\n\t\t\t\t\t...this.state.history,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcells: currentcells,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcells: this.state.cells,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t\tlastPosition:item.unitNo,\r\n\t\t\t\t/*time:time*/\r\n\t\t\t},()=> {\r\n\t\t\t});\r\n\t\t\tconsole.log(\"History after now \", this.state.history);\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tnextPatchProducts: [...this.state.nextPatchProducts, item],\r\n\t\t\t});\r\n\t\t\talert(\r\n\t\t\t\t\"No space for \" + item.productName + \" will be added in the next patch.\"\r\n\t\t\t);\r\n\t\t\tconsole.log(\"no space for \", item);\r\n\t\t\tstartIndex = originalStartIndex;\r\n\t\t}\r\n\r\n\t\treturn startIndex;\r\n\t}\r\n\r\n\tfillBoard() {\r\n\t\t// this is to refactored soon!!\r\n\t\tlet startIndex = 0;\r\n\t\tlet that = this;\r\n\t\tthis.state.order.forEach(function (item) {\r\n\t\t\tfor (let m = 0; m < item.quantity; m++) {\r\n\t\t\t\tstartIndex = that.handleOneProduct(item, startIndex);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconsole.log(\"History after now \", this.state.history);\r\n\t}\r\n\tupdateIndices(index) {\r\n\t\tlet indices = this.state.beltIndices;\r\n\t\tlet startIndex = index % 5;\r\n\t\tlet rowNumber = (index - startIndex) / 5;\r\n\t\tindices[startIndex] = rowNumber;\r\n\t\tthis.setState({\r\n\t\t\tbeltIndices: indices,\r\n\t\t});\r\n\t}\r\n\tfillCellsFromRight(startingPoint, item) {\r\n\t\tlet currentCells = this.state.cells;\r\n\t\tfor (let i = 0; i < item.cellsDepth; i++)\r\n\t\t\tfor (let j = 0; j < item.beltCount; j++) {\r\n\t\t\t\tlet index = i * this.state.cellsInRow + j;\r\n\t\t\t\tcurrentCells[startingPoint + index] = item.symbol + \": Right\";\r\n\t\t\t\tthis.updateIndices(startingPoint + index);\r\n\t\t\t}\r\n\t\treturn currentCells;\r\n\t}\r\n\r\n\tmodifyIndex(startIndex, beltCount) {\r\n\t\tlet index = 0;\r\n\t\tif (startIndex + beltCount > 5 || beltCount > 3) index = 0;\r\n\t\tif (beltCount === 3) index = 2;\r\n\t\tif (beltCount === 2 && startIndex % 2 === 1) index = startIndex + 1;\r\n\t\telse index = startIndex;\r\n\t\tconsole.log(\r\n\t\t\t\"index is \",\r\n\t\t\tindex,\r\n\t\t\t\"start\",\r\n\t\t\tstartIndex,\r\n\t\t\t\"belt count\",\r\n\t\t\tbeltCount\r\n\t\t);\r\n\t\treturn index;\r\n\t}\r\n\tupdateBeltsStatus(cells=this.state.cells){\r\n\t\tlet beltIndices = [];\r\n\t\tfor(let i=0;i<this.state.cellsInRow;i++)\r\n\t\t{\r\n\t\t\tfor(let j =21; j>=0; j--){\r\n\t\t\t\tif(cells[j*5+i] != null){\r\n\t\t\t\t\tbeltIndices[i] = j+1;\r\n\t\t\t\t\tbreak;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tbeltIndices:beltIndices\r\n\t\t});\r\n\t\tconsole.log('indices are ',beltIndices)\r\n\t}\r\n\tcheckSpace(startIndex, beltCount, cellsDepth) {\r\n\t\tlet startRow = this.state.cellsInBent - cellsDepth;\r\n\t\tfor (let i = startRow; i < this.state.cellsInBent; i++) {\r\n\t\t\tfor (let l = 0; l < beltCount; l++) {\r\n\t\t\t\tconst index = i * 5 + startIndex + l;\r\n\t\t\t\tif (this.state.cells[index] !== null) return false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tshiftCells(startIndex, item) {\r\n\t\tlet indicesUpdated = [];\r\n\t\tfor (let m = 0; m < item.beltCount*item.cellsDepth; m++) \r\n\t\t\tindicesUpdated.push(false);\r\n\t\tconsole.log(\"indices updated: \", indicesUpdated);\r\n\t\tlet currentCells = this.state.cells;\r\n\t\tconst cellsInRow = this.state.cellsInRow;\r\n\t\tlet count = 0;\r\n\t\tlet direction = item.name.dir;\r\n\t\tif (direction === \"left\") {\r\n\t\t\tfor (let i = 0; i < item.cellsDepth; i++)\r\n\t\t\t\tfor (let j = this.state.cellsInBent - 1; j > 0; j--)\r\n\t\t\t\t\tfor (let k = 0; k < item.beltCount; k++) {\r\n\t\t\t\t\t\tlet index = startIndex + j * cellsInRow + k;\r\n\t\t\t\t\t\tcount = count + 1;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t!indicesUpdated[k + startIndex] &&\r\n\t\t\t\t\t\t\tcurrentCells[index] === null &&\r\n\t\t\t\t\t\t\tcurrentCells[index - cellsInRow] !== null\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t//this.updateIndices(index - cellsInRow);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.updateIndices(index - cellsInRow);\r\n\t\t\t\t\t\tcurrentCells[index] = currentCells[index - cellsInRow];\r\n\t\t\t\t\t\tcurrentCells[index - cellsInRow] = \"Left \" + item.symbol;\r\n\t\t\t\t\t}\r\n\t\t} else if (direction === \"right\") {\r\n\t\t\tconsole.log(\"right side\");\r\n\t\t\tfor (let j = 21; j >= 0; j--) {\r\n\t\t\t\tlet k = 0;\r\n\t\t\t\tlet startingPoint = startIndex + j * cellsInRow;\r\n\t\t\t\tlet index = startIndex + j * cellsInRow + k;\r\n\t\t\t\tlet valid = true;\r\n\t\t\t\tfor (let m = 0; m < item.beltCount; m++) {\r\n\t\t\t\t\tif (currentCells[index + m] === null) valid = true;\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (valid && startingPoint < 5)\r\n\t\t\t\t\tcurrentCells = this.fillCellsFromRight(startingPoint, item);\r\n\t\t\t\telse if (!valid || startingPoint < cellsInRow) {\r\n\t\t\t\t\tstartingPoint = startingPoint + cellsInRow;\r\n\t\t\t\t\tcurrentCells = this.fillCellsFromRight(startingPoint, item);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(\"swap count\", count);\r\n\t\tthis.setState({\r\n\t\t\tcells: currentCells,\r\n\t\t\thistory: [\r\n\t\t\t\t...this.state.history,\r\n\t\t\t\t{\r\n\t\t\t\t\tcells: currentCells,\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t});\r\n\r\n\t\treturn currentCells;\r\n\t}\r\n\r\n\trenderCell(i) {\r\n\t\treturn <Cell value={this.state.cells[i]} />;\r\n\t}\r\n\r\n\taddProduct(id) {\r\n\t\t// if this item in the list then only update quantity\r\n\t\t//let name = allProducts[id].name;\r\n\t\t/*var found = false;\r\n\t\tfor (var i = 0; i < this.state.myOrder.length; i++) {\r\n\t\t\tif (this.state.myOrder[i].id == id) {\r\n\t\t\t\tconsole.log('heahdsfhdsfahdfsh before', this.state.myOrder[i]);\r\n\t\t\t\tfound = true;\r\n\t\t\t\tlet item = this.state.myOrder[i];\r\n\t\t\t\titem.quantity = item.quantity+1;\r\n\t\t\t\tlet itemWithName= this.state.myOrderWithName[i];\r\n\t\t\t\titemWithName.quantity = itemWithName.quantity+1;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tmyOrder:[...this.state.myOrder.slice(0,id),item,...this.state.myOrder.slice(id+1)],\r\n\t\t\t\t\tmyOrderWithName: [...this.state.myOrderWithName.slice(0, id), itemWithName, ...this.state.myOrderWithName.slice(id + 1)],\r\n\t\t\t\t},\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tthis.setOrder(-1);\r\n\t\t\t\t\t});\r\n\t\t\t\tconsole.log('heahdsfhdsfahdfsh asdfh', item);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!found){*/\r\n\t\t\tlet item = {\r\n\t\t\t\tid: id,\r\n\t\t\t\tquantity: 1,\r\n\t\t\t};\r\n\t\t\tlet itemWithName = {\r\n\t\t\t\tid: id - 1,\r\n\t\t\t\tquantity: 1,\r\n\t\t\t\tname: allProducts[id - 1].name,\r\n\t\t\t};\r\n\r\n\t\t\tthis.setState(\r\n\t\t\t\t{\r\n\t\t\t\t\tmyOrder: [...this.state.myOrder, item],\r\n\t\t\t\t\tmyOrderWithName: [...this.state.myOrderWithName, itemWithName],\r\n\t\t\t\t},\r\n\t\t\t\t() => {\r\n\t\t\t\t\tthis.setOrder(-1);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t//}\r\n\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Row>\r\n\t\t\t\t<Col xs={2} md={2}>\r\n\t\t\t\t\t<h3> Products </h3>\r\n\t\t\t\t\t<ListGroup variant=\"flush\">\r\n\t\t\t\t\t\t<Products\r\n\t\t\t\t\t\t\tproducts={this.state.products}\r\n\t\t\t\t\t\t\taddProduct={(id) => this.addProduct(id)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</ListGroup>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={4} md={4}>\r\n\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t<Card.Title> Order </Card.Title>\r\n\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t<Table striped bordered hover>\r\n\t\t\t\t\t\t\t\t<tbody><tr><th> # </th><th> Name </th><th> Qn </th><th> Dir </th><th> BeltCo </th><th> Cells </th><th>Unit</th></tr>\r\n\t\t\t\t\t\t\t\t\t<Order\r\n\t\t\t\t\t\t\t\t\t\torder={this.state.order}\r\n\t\t\t\t\t\t\t\t\t\tproducts={this.state.products}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(0)}>Order 1 </button>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(1)}>Order 2 </button>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(2)}>Order 3 </button>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(3)}>Order 4 </button>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(4)}>Order 5 </button>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(5)}>Order 6 </button>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(6)}>Order 7 </button>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(7)}>Order 8 </button>\r\n\t\t\t\t\t\t\t<button onClick={() => this.setOrder(8)}>Order 9 </button>\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col xs={3} ms={4}>\r\n\t\t\t\t\t<Cell value={this.state.cells[0]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[1]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[2]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[3]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[4]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[5]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[6]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[7]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[8]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[9]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[10]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[11]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[12]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[13]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[14]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[15]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[16]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[17]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[18]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[19]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[20]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[21]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[22]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[23]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[24]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[25]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[26]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[27]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[28]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[29]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[30]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[31]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[32]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[33]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[34]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[35]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[36]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[37]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[38]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[39]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[40]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[41]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[42]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[43]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[44]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[45]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[46]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[47]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[48]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[49]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[50]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[51]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[52]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[53]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[54]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[55]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[56]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[57]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[58]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[59]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[60]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[61]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[62]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[63]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[64]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[65]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[66]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[67]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[68]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[69]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[70]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[71]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[72]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[73]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[74]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[75]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[76]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[77]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[78]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[79]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[80]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[81]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[82]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[83]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[84]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[85]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[86]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[87]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[88]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[89]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[90]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[91]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[92]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[93]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[94]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[95]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[96]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[97]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[98]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[99]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[100]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[101]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[102]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[103]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[104]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[105]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[106]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[107]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[108]} />\r\n\t\t\t\t\t<Cell value={this.state.cells[109]} />\r\n\t\t\t\t\t<span> Percentage: {this.state.fillingPercent} </span>\r\n\t\t\t\t\t<span> Time: {this.state.time} Seconds </span>\r\n\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={2} md={2}>\r\n\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t<Card.Title> My Order </Card.Title>\r\n\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t{this.state.myOrderWithName.map((product) => (\r\n\t\t\t\t\t\t\t\t<ListGroup.Item className=\"itemProductCustom\" key={product.id}>\r\n\t\t\t\t\t\t\t\t\t{product.name} - qn: {product.quantity}\r\n\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t<button onClick={() => this.setOrder(-1)}> Pick Order </button>\r\n\t\t\t\t\t\t<button onClick={() => this.clearMyOrder()}> Clear Order </button>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Board;\r\n","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\Cell.js",[],"D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\products.js",["43"],"import React from 'react';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\n\r\nclass Products extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    onClick = (event) => {\r\n        this.props.addProduct(event.target.id);\r\n        event.preventDefault();\r\n    }\r\n    render() {\r\n       return this.props.products.map((product) => (\r\n           <ListGroup.Item className='itemProduct' key={product.id} id={product.id}\r\n               onClick={this.onClick}> \r\n           { product.id}. { product.name} {product.symbol} \r\n           - {product.beltCount} Belt Count \r\n           - {product.cellsDepth} Cells Depth\r\n            </ListGroup.Item>\r\n       ));\r\n    }\r\n}\r\n\r\nexport default Products;","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\Order.js",[],"D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\grid.js",["44"],"import React from 'react';\r\nimport Cell from './Cell.js';\r\n\r\nclass Grid extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcells: this.props.cells\r\n\t\t}\r\n\t}\r\n\trenderCell = (id) => {\r\n\t\tthis.props.renderCell(id);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<\r\n\t\t\tdiv className = \"board-row\" >\r\n\r\n\t\t\t<\r\n\t\t\t/div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default Grid;","D:\\Projects\\OrderSimulator-master\\OrderSimulator\\src\\data.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":12},{"ruleId":"53","severity":1,"message":"54","line":44,"column":19,"nodeType":"55","messageId":"56","endLine":44,"endColumn":21},{"ruleId":"53","severity":1,"message":"57","line":49,"column":15,"nodeType":"55","messageId":"56","endLine":49,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":113,"column":22,"nodeType":"55","messageId":"56","endLine":113,"endColumn":24},{"ruleId":"53","severity":1,"message":"57","line":113,"column":41,"nodeType":"55","messageId":"56","endLine":113,"endColumn":43},{"ruleId":"53","severity":1,"message":"57","line":114,"column":22,"nodeType":"55","messageId":"56","endLine":114,"endColumn":24},{"ruleId":"53","severity":1,"message":"57","line":114,"column":41,"nodeType":"55","messageId":"56","endLine":114,"endColumn":43},{"ruleId":"58","severity":1,"message":"59","line":6,"column":5,"nodeType":"60","messageId":"61","endLine":8,"endColumn":6},{"ruleId":"49","severity":1,"message":"62","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":12},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Cell' is defined but never used.","no-global-assign","no-unsafe-negation"]